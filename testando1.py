# Exemplo de rede P2P com 3 n√≥s em Python usando sockets

import socket
import threading

# Configura√ß√µes dos n√≥s
nodes = [
    {"host": "localhost", "port": 5000},
    {"host": "localhost", "port": 5001},
    {"host": "localhost", "port": 5002}
]

def handle_connection(client_socket, node_id):
    while True:
        data = client_socket.recv(1024).decode("utf-8")
        if not data:
            break
        print(f"Node {node_id}: Recebido: {data}")
        # Aqui voc√™ pode processar os dados recebidos ou encaminh√°-los para outros n√≥s

def start_node(node_id):
    node = nodes[node_id]
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((node["host"], node["port"]))
    server_socket.listen(1)
    print(f"Node {node_id} escutando em {node['host']}:{node['port']}")

    while True:
        client_socket, _ = server_socket.accept()
        print(f"Node {node_id}: Nova conex√£o recebida")
        client_handler = threading.Thread(target=handle_connection, args=(client_socket, node_id))
        client_handler.start()

# Inicializa os n√≥s
for i in range(len(nodes)):
    threading.Thread(target=start_node, args=(i,)).start()

'''

Exatamente! Do lado do servidor (n√≥), voc√™ n√£o precisa explicitamente chamar `socket.connect()`. A fun√ß√£o `socket.connect()` √© usada apenas pelo cliente para estabelecer uma conex√£o com o servidor. No lado do servidor, voc√™ cria um socket, vincula-o a um endere√ßo e porta e, em seguida, escuta por conex√µes entrantes.

Aqui est√° uma breve explica√ß√£o:

1. **Cliente (N√≥)**:
   - O cliente (n√≥) √© aquele que inicia a conex√£o.
   - Ele cria um socket, chama `socket.connect()` para se conectar a um servidor (n√≥) espec√≠fico e envia dados.
   - No exemplo que forneci anteriormente, n√£o temos um cliente espec√≠fico, pois todos os n√≥s atuam como clientes e servidores ao mesmo tempo.

2. **Servidor (N√≥)**:
   - O servidor (n√≥) √© aquele que escuta por conex√µes entrantes.
   - Ele cria um socket, chama `socket.bind()` para vincul√°-lo a um endere√ßo e porta espec√≠ficos e, em seguida, chama `socket.listen()` para come√ßar a escutar por conex√µes.
   - Quando um cliente (n√≥) se conecta, o servidor aceita a conex√£o usando `socket.accept()` e inicia uma thread ou processo para lidar com essa conex√£o.

Portanto, no lado do servidor, voc√™ n√£o precisa explicitamente chamar `socket.connect()`. A comunica√ß√£o entre os n√≥s ocorre quando um cliente se conecta ao servidor. üòä


'''


'''
√ìtima pergunta! Vamos explorar como os peers podem se comunicar e como eles podem descobrir uns aos outros em uma rede P2P.

1. **Descoberta de Peers**:
   - Inicialmente, os peers precisam descobrir uns aos outros para estabelecer conex√µes.
   - Existem v√°rias maneiras de fazer isso:
     - **Conhecimento Pr√©vio**: Se voc√™ tiver uma lista fixa de peers conhecidos (por exemplo, de configura√ß√µes ou arquivos de configura√ß√£o), os peers podem se conectar diretamente a esses endere√ßos.
     - **Bootstrap Nodes**: Alguns sistemas P2P usam "bootstrap nodes" (n√≥s de inicializa√ß√£o). Esses n√≥s s√£o conhecidos e est√£o sempre dispon√≠veis. Os peers se conectam a esses n√≥s primeiro e obt√™m informa√ß√µes sobre outros peers.
     - **Broadcast ou Multicast**: Os peers podem enviar mensagens de broadcast ou multicast para anunciar sua presen√ßa. Outros peers que ouvirem essas mensagens podem responder e estabelecer conex√µes.
     - **DHT (Tabela de Hash Distribu√≠da)**: Alguns sistemas P2P usam DHTs para armazenar informa√ß√µes sobre peers. Cada peer tem uma chave (geralmente baseada em algum identificador √∫nico) e pode procurar outros peers usando essa chave.

2. **Monitoramento de Peer**:
   - Para saber se um peer "morreu", outros peers podem usar t√©cnicas como:
     - **Timeouts**: Se um peer n√£o responder ap√≥s um certo per√≠odo de tempo, outros peers podem consider√°-lo inativo ou morto.
     - **Ping/Keep-Alive**: Os peers podem enviar mensagens peri√≥dicas (ping ou keep-alive) para verificar se o outro peer ainda est√° ativo.
     - **Verifica√ß√£o de Conte√∫do**: Alguns sistemas P2P verificam se os peers est√£o compartilhando conte√∫do v√°lido. Se um peer n√£o estiver contribuindo com dados √∫teis, ele pode ser considerado inativo.

3. **Redund√¢ncia**:
   - Para garantir a robustez da rede, os peers geralmente se conectam a v√°rios outros peers (n√£o apenas um).
   - Se um peer falhar, outros ainda podem se comunicar com os peers restantes.

Lembre-se de que a implementa√ß√£o real pode variar dependendo do sistema P2P espec√≠fico. Alguns sistemas, como o BitTorrent, usam uma combina√ß√£o dessas t√©cnicas. Espero que isso esclare√ßa como os peers se comunicam e como eles podem detectar se um peer est√° inativo! üòä'''

# exemplo de uma mensagem de monitoramento de peer por timeout
import time

class Peer:
    def __init__(self, address):
        self.address = address
        self.last_activity = time.time()

    def update_activity(self):
        self.last_activity = time.time()

    def is_active(self, timeout=60):
        return time.time() - self.last_activity < timeout

# Exemplo de uso
peer1 = Peer("192.168.1.10")
peer2 = Peer("192.168.1.20")

# Atualize a atividade dos peers (chamado quando receber dados de um peer)
peer1.update_activity()

# Verifique se um peer est√° ativo
if peer2.is_active():
    print("Peer 2 est√° ativo.")
else:
    print("Peer 2 est√° inativo ou morto.")
